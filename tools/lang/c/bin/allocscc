#!/usr/bin/env python

# Compiler wrapper for liballocs.
# We mostly delegate to cilly,passing --save-temps=$( dirname "$inputfile" )
# i.e. to ensure that temporaries get created in the source file's location
# FIXME: This might break some builds using a separate objdir.
# The Right Thing to do is to somehow replicate the source directory structure
# rooted at the current directory. But it's not clear how to do this in general.

import os, sys, re, subprocess, tempfile
# HACK
sys.path.append(os.path.realpath(os.path.dirname(__file__) + "/../../.."))
from allocscompilerwrapper import *

class AllocsCC(AllocsCompilerWrapper):

    def defaultL1AllocFns(self):
        return ["malloc(Z)p", "calloc(zZ)p", "realloc(pZ)p", "memalign(zZ)p"]

    def defaultFreeFns(self):
        return ["free(P)"]

    def getCustomCompileArgs(self, sourceInputFiles):
        # "-pipe" interferes with -save-temps, with disastrous conseqeunces
        # trying to create files named "-.i", "-.s" which then get interpreted
        # as command-line options.
        #saveTempsArgs = ['-save-temps']
        if not '-pipe' in sys.argv:
            saveTempsArgs = ['-save-temps']
        else:
            saveTempsArgs = []
        for sourceFile in sourceInputFiles:
            dirname = os.path.dirname(sourceFile)
            # FIXME: support multiple distinct directories here, if cilly can
            if dirname != "":
                 saveTempsArgs = ["--save-temps=" + dirname]
        return AllocsCompilerWrapper.getCustomCompileArgs(self, sourceInputFiles) \
        + saveTempsArgs
    
    def makeObjectFileName(self, sourceFile):
            nameStem, nameExtension = os.path.splitext(sourceFile)
            if (nameExtension == ".c"):
                outputFilename = nameStem + ".o"
                self.debugMsg("Making a secret output file (from .c source) " + outputFilename + "\n")
            else:
                outputFilename = sourceFile + ".o"
                self.debugMsg("Making a secret output file (from unknown source) " + outputFilename + "\n")
            return outputFilename

    def getCillyArgs(self, sourceFiles):
        # allocscc uses this unmodified (we're not an abstract base).
        # PROBLEM: we only want to -include if we're compiling a C file. 
        # Note that normally cilly will figure out when we're compiling
        # a .S file, say, and only pass options that are relevant. But
        # it would be asking too much in this case. 
        
        allSourceFilesAreC = True
        for sourceFile in sourceFiles:
            if sourceFile.lang != "c" and not sourceFile.endswith(".c"):
                allSourceFilesAreC = False
        
        includeArgs = []
        # We can only do monalloca, and anything else that involves -include, 
        # if we're compiling only C files.
        if len(sourceFiles) > 0 and allSourceFilesAreC:
            self.debugMsg("All source files (%d) are C files\n" % len(sourceFiles))
            includeArgs = ["-include", \
               os.path.dirname(__file__) + "/../../../../include/liballocs_cil_inlines.h", \
        "--load=%s" % (self.getLibAllocsBaseDir() + "tools/lang/c/monalloca/monalloca.cmxs"), \
        "--domonalloca"]
        else:
            self.debugMsg("No source files, or not all (only %d) are C files\n" % len(sourceFiles))
        
        return [\
        "--load=%s" % (self.getLibAllocsBaseDir() + "tools/lang/c/dumpallocs/dumpallocs.cmxs"), \
           "--dodumpallocs", \
            "--keepunused"] \
            + includeArgs + \
            ["-Wno-unused-variable", "-Wno-unused-label"] \
            + ["-g", "-fno-eliminate-unused-debug-types"]
            # We need the above -Wno-unused-... because CIL creates
            # some unused stuff (unavoidably, I believe) which will
            # make compilation done with -Werror barf if we don't
            # silence them.
    
    def getUnderlyingCompilerCommand(self, sourceFiles):
        return ["cilly"] + self.getCillyArgs(sourceFiles)
    
    # HACK HACK HACK override buildOneObjectFile so that if we fail, we try the vanilla cc
    def runUnderlyingCompiler(self, sourceFiles, options):
        ret1 = AllocsCompilerWrapper.runUnderlyingCompiler(self, sourceFiles, options)
        if (ret1 != 0):
            originalCommand = self.getUnderlyingCompilerCommand(sourceFiles) + options
            alternativeCommand = ["cc"] + [s for s in originalCommand if s != "cilly" and \
                not s.startswith("--")]
            self.debugMsg("Falling back to: " + " ".join(alternativeCommand) + "\n")
            ret1 = subprocess.call(alternativeCommand)
            if (ret1 == 0):
                self.debugMsg("WARNING: fell back to cc to compile [%s]\n" % ", ".join(sourceFiles))
        return ret1

if __name__ == '__main__':
    wrapper = AllocsCC()
    ret = wrapper.main()
    exit(ret)

